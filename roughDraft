# ******************************************************************************************
# courseProject.ipynb
# Justin Trubela, Austin Wolcott, name3
#
 
import sqlite3
from sqlite3 import Error

def connect_and_execute(SQL_String):
    sqlite3.connect(db).cursor().execute(SQL_String)
def update_DB():
    sqlite3.connect(db).cursor()
    sqlite3.connect(db).commit()
def insertSQLelement(SQL_String):
    connect_and_execute(SQL_String)
    update_DB()
def query_SQLData():
    return sqlite3.connect(db).cursor().fetchall()
def query_SQLData_():
    return sqlite3.connect(db).cursor().fetchall()[0]


#----------------------------------------------------------------------------------------------------
                                        #Student - Insert New and Search for Name
def Create_student(sID, sName):
    sql = "INSERT INTO Students (sID,sName) VALUES (null,null);"

    insertSQLelement(sql)
    userChoice = input("\nEnter a command:")
    #Restart menu items
    student_menu(userChoice, sID)
 
'''# #index out of range [0]
# def Get_studentsName(conn, sID):
#     sql = "SELECT sName FROM Students WHERE sID = ?"
#     cursor = conn.cursor()
#     cursor.execute(sql, (sID,))
#     # connect_and_execute(sql, (sID,))
#     print(len(cursor.fetchall()))
#     sName = str(cursor.fetchall()[0])
#     return sName.replace("('","").replace("'.)","")'''
 
#----------------------------------------------------------------------------------------------------
 
def Create_course(cID, cName, numCredits):
    sql = "INSERT INTO Courses (cID, cName, numCredits) VALUES (?,?,?);"
    connect_and_execute(sql)
    update_DB()
    insertSQLelement(sql)
 
def Check_if_cID_exists(cID):
    sql = "SELECT count(*) FROM Courses WHERE cID = ?"
    connect_and_execute(sql, (cID,))
    
    #check empty function
    if(query_SQLData > 0):
        print("course exists")
        return True
    else:
        print("course does not exist")
        quit(0)
        return False
    
def Check_if_Course_table_is_empty():
    sql = "SELECT count(*) FROM Courses"
    connect_and_execute(sql)
    
    #Check empty function
    if(query_SQLData() == 0):
        print("no courses available")
        return True
    else:
        numCourses = query_SQLData()
        print("Courses available: \n")
        print("  course ID ----- Course Name ----- numCredits  \n")
        for course in numCourses:
            print(course)
            print("\n")
        return False
 
#----------------------------------------------------------------------------------------------------

def Show_all_Courses(sID):
    sql = "  SELECT c.cID, c.cName, c.numCredits FROM Enrollment e, Courses c WHERE e.cID = c.cID AND e.sID = '{sID}'"
    connect_and_execute(sql)
    print(connect_and_execute(sql))

    # connect_and_execute(sql.replace("?", str(sID)))

    Check_if_Course_table_is_empty()
 
def Show_all_My_Courses(sID):
    sql = "SELECT * FROM Courses; "

    connect_and_execute(sql)
    numCourses = query_SQLData()
 
    #check 0 function
    if len(numCourses) == 0: 
        print("Student is not enrolled in any classes\n")
    else:
        print("You are Enrolled in the following classes: \n")
        print("  course ID ----- Course Name ----- numCredits  \n")
        for course in numCourses:
            print(course)
            print("\n")
 
def Show_similar_courses(cID, str):
    '''Check if null or {str(str) will work instead} '''
    #take substring entered from the user and check
    sql = '"SELECT * FROM Courses WHERE cName LIKE \"%?%\"'
    # cursor = conn.cursor()
    # cursor.execute(sql.replace("?", str(str)))
    connect_and_execute(sql.replace("?", str(str)))
    # connect_and_execute(sql.replace("?", str(str)))
    numCourses = query_SQLData()
 
    #check 0 function
    if len(numCourses) == 0: 
        print("no courses with those letters seem to be present")
    else:
        print("Courses found with those letters: \n")
        print("  course ID ----- Course Name ----- numCredits  \n")
        for course in numCourses:
            print(course)
            print("\n")
 
def create_enrollment(sID, cID):
    sql = "INSERT INTO Enrollment (sID,cID) VALUES (?,?);"
    connect_and_execute(sql)
    update_DB()
 
def remove_enrollment(sID, cID):
    sql = "DELETE FROM Enrollment WHERE sID = ? AND cID = ?"
    values = (sID,cID)
    try: 
        connect_and_execute(sql, values)
    except Error as e:
        print(e)
    return conn
 
def check_if_sID_exists(sID):
    sql = "SELECT count(*) FROM Students WHERE sID = ?"
    connect_and_execute(sql, (sID,))
    #is > 0 function
    if(query_SQLData > 0):
        return True
    else:
        return False
 
def check_if_sID_is_enrolled_in_cID(sID, cID):
    sql = "SELECT count(*) FROM Enrollment WHERE sID = ? AND cID = ?"
    values = (sID, cID)

    connect_and_execute(sql,values)
    #check > 0 function
    if(query_SQLData > 0):
        return True
    else:
        return False
 
def student_menu(choice, sID):
    '''
    #----------------------------------------------------------------------------------------------------
    
    #Student Menu: 
    #Application starts by requesting student’s ID. If (-1) is introduced, a new student is created, and 
    #the user is prompted for all necessary information. The main menu is the following: 
     
    #L – List: lists all records in the course table 
    #E – Enroll: enrolls the active student in a course; user is prompted for course ID; check for 
    #conflicts, i.e., student cannot enroll twice in same course 
    
    #W – Withdraw: deletes an entry in the Enrolled table corresponding to active student; student 
    #is prompted for course ID to be withdrawn from 
    #S – Search: search course based on substring of course name which is given by user; list all 
    #matching courses 
    #M – My Classes: lists all classes enrolled in by the active student. 
    #X – Exit: exit application     
    
    #----------------------------------------------------------------------------------------------------
    '''
    choice = input("\nEnter a command:")

    while True:
        if choice == 'L' or choice == 'l':
            if (Check_if_Course_table_is_empty() == False):
                Show_all_Courses()
        elif choice == 'E' or choice == 'e':
            while True: 
                cID = input(("Enter the course ID you wish to register in((x) to exit):"))

                if cID == 'x':
                    exit_menu()
                
                #check if cID exists before registering
                Check_if_cID_exists(cID)

                #if not available
                #if course ID is available
                    #Check if sID already registerd in chosen cID
                if (check_if_sID_is_enrolled_in_cID == False):
                    create_enrollment(sID, cID)
                    break
                else:
                    print("This studentID is already registerd for this course. Try another one")
        elif choice == 'W' or choice == 'w':
            print("Which course would you like to withdraw from")
            #show all courses registered for
            Show_all_My_Courses(sID)
            #ask user to pick
            while True:
                cID = input("Enter the course number you would like to withdraw from:\n")
                #remove enrollment
                remove_enrollment(sID, cID)
        elif choice == 'S' or choice == 's':
            theCourse = input("Enter the course you are trying to find similar to: ")
            Show_similar_courses(cID, theCourse)
        elif choice == 'M' or choice == 'm':
            Show_all_My_Courses(sID)
        elif choice == 'X' or choice == 'x':
            print("This registration window has ended. Goodbye")
            break
        else:
            print("Invalid response. Try again\n")

def exit_menu():
    exit(1)


#****************************************************************************************************
#****************************************************************************************************
#****************************************************************************************************
#**********************************  ---------   MAIN   ---------  **********************************
#****************************************************************************************************
#****************************************************************************************************
#****************************************************************************************************

#Establish Connection to SQL database
db = r"CourseProjectDB.db"

conn = sqlite3.connect(db)
c = conn.cursor()




#----------------------------------------------------------------------------------------------------
                                    #DEBUG - REGRESSION TESTING
#----------------------------------------------------------------------------------------------------
                                    
'''

def create_tables(conn, SchemaTables, Schemas):
 
    def get_Schema(Schema):
        str = ""
 
        for schema in Schema:
            str+=schema
            return str
# test = True
 
# while test is True:
#     if conn is None:
#         print("NO DB DETECTED....CREATING TABLES")
#         try:
#             createTableSql = "CREATE TABLE IF NOT EXISTS "
#             c=conn.cursor()
#             for i in range(0,len(SchemaTables)-1):
#                 cursor_string = createTableSql + get_Schema(Schemas[i]) + get_Schema(SchemaTables[i])
#                 c.execute(cursor_string)

#         except Error as e:
#             print(e)
        
    # ----------------------------------------------------------------------------------------------------
    # Create tables if no db is detected
    # Enrolled = ("(","sID integer, ", "cID integer,",
    #             "FOREIGN KEY (sID) REFERENCES Students (sID)",
    #             "FOREIGN KEY (cID) REFERENCES Courses (cID)",");")
        
    # Courses = ("(","cID integer PRIMARY KEY, ", 
    #         "cName text, ", 
    #         "numCredits integer",");")

    # Students = ("(","sID integer PRIMARY KEY, ", 
    #             "sName text",");")

    # TableNames = ("Enrolled", "Courses", "Students")
    # Tables = (Enrolled, Courses, Students)
    # ----------------------------------------------------------------------------------------------------
    # Create Students, Enrolled, and Courses tables, if they don't already exist.
    # create_tables(conn, Tables, TableNames)
        
    # else: 
    #     print("DB DETECTED")
    #     break
#Check functions work as planned
#list courses
#Create Table
#Search for sName
#Search for cID
#Search for sID
#Search for cName
#Search for course like cName
#Search for 



#----------------------------------------------------------------------------------------------------
'''
# Show_all_My_Courses()
'''student not enrolled in any class'''
Create_student(123, "Justin")
Show_all_Courses(123)
#----------------------------------------------------------------------------------------------------

#Program Begin
print("Welcome to the Student Registration")

while True:
    #prompt user to enter -1 or their id
    usersID = input(("\nEnter your student ID or -1 if you are a new student"))
    #new enrollment
    if int(usersID) == -1:
        sName = input("Enter your name: ")
        Create_student(usersID, sName)
    #enter student menu    
    else:
        # sName = Get_studentsName(conn, int(usersID))
        # print("Welcome back, " + sName)
        print("Welcome back!")

        userChoice = input("\nEnter a command:")
        student_menu(userChoice, usersID)
        break
 
conn.close()
